import 'dart:async';

import 'package:build/build.dart';
import 'package:path/path.dart' as path;
import 'package:yaml/yaml.dart';

Builder configBuilder(final BuilderOptions options) => _ConfigBuilder();

class _ConfigBuilder extends Builder {
  @override
  Map<String, List<String>> get buildExtensions => <String, List<String>>{
        '.yaml': <String>['.dart'],
      };

  static const String _defaultConfigFileName = 'coap_config';

  @override
  FutureOr<void> build(final BuildStep buildStep) async {
    final id = buildStep.inputId;
    final fileName = path.basename(id.path);
    if (!fileName.startsWith(_defaultConfigFileName)) {
      return;
    }

    final yamlConfig = await buildStep.readAsString(id);
    final data = loadYaml(yamlConfig) as YamlMap;

    if (!data.containsKey('version')) {
      throw Exception(
        'Invalid CoAP configuration file, '
        'make sure to include the [version] key',
      );
    }

    final className = generateClassName(fileName);
    final contents = _generateFileTemplate(className, data);
    return buildStep.writeAsString(id.changeExtension('.dart'), contents);
  }
}

String generateClassName(final String fileName) {
  final name = fileName.replaceAll('.yaml', '');
  return name.split('_').map((final part) => part.capitalize()).join();
}

String _generateFileTemplate(
  final String className,
  final YamlMap data,
) =>
    """
// GENERATED CODE, do not edit this file.

import 'package:coap/coap.dart';

/// Configuration loading class. The config file itself is a YAML
/// file. The configuration items below are marked as optional to allow
/// the config file to contain only those entries that override the defaults.
/// The file can't be empty, so version must as a minimum be present.
class $className extends DefaultCoapConfig {
${_generateDataScript(data, '')}
}
""";

String _generateDataScript(final YamlMap data, final String prefix) {
  final buf = StringBuffer();

  data.forEach((final yamlKey, final value) {
    if (value == null) {
      return;
    }

    final key = yamlKey as String;

    if (value is YamlMap) {
      buf.write(_generateDataScript(value, key));
      return;
    }

    final variableName =
        prefix.isEmpty ? key : prefix + key[0].toUpperCase() + key.substring(1);

    if (variableName == 'dtlsBackend') {
      buf
        ..writeln('  @override')
        ..writeln('  DtlsBackend? get $variableName => DtlsBackend.$value;')
        ..writeln();
      return;
    }

    buf.writeln('  @override');
    if (value is String) {
      buf.writeln("  String get $variableName => '$value';");
    } else if (value is bool) {
      buf.writeln('  bool get $variableName => $value;');
    } else if (value is int) {
      buf.writeln('  int get $variableName => $value;');
    } else if (value is double) {
      buf.writeln('  double get $variableName => $value;');
    }
    buf.writeln();
  });

  return buf.toString().trimRight();
}

extension StringExtension on String {
  String capitalize() => this[0].toUpperCase() + substring(1);
}
